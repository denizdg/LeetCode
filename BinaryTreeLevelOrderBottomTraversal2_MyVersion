// My first attempt before realizing levels are in the list. This version just adds the numbers to the list in necessary order.
// It doesn't group them by level.

public static List<List<Integer>> levelOrderBottom(TreeNode root) {

		List<List<Integer>> result = new ArrayList<List<Integer>>();

		if (root == null)
			return result;

		Queue<TreeNode> q = new LinkedList<>();
		Stack<TreeNode> s = new Stack<TreeNode>();
		List<Integer> resultList = new ArrayList<>();

		TreeNode curr = root;
		q.add(curr);
		while (!q.isEmpty()) {
			if (curr.right != null) {
				q.add(curr.right);
			}
			if (curr.left != null) {
				q.add(curr.left);
			}
			s.push(curr);
			q.poll();
			curr = q.peek();
		}
		int size = s.size();
		for (int i = 0; i < size; i++) {
			resultList.add(s.pop().val);
		}

		result.add(resultList);

		return result;

	}
